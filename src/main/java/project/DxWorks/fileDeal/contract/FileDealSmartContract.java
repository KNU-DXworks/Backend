package project.DxWorks.fileDeal.contract;

import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.Transaction;
import org.web3j.protocol.core.methods.response.EthSendTransaction;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class FileDealSmartContract extends Contract {

    public static final String BINARY = "608060405234801561000f575f80fd5b506116148061001d5f395ff3fe60806040526004361061006f575f3560e01c806382fd5bac1161004d57806382fd5bac1461010d578063d450fbc91461014d578063dcba26aa14610189578063fd84cb97146101b15761006f565b806303988f841461007357806340500932146100b35780634d9879e3146100e3575b5f80fd5b34801561007e575f80fd5b5061009960048036038101906100949190610bc6565b6101d9565b6040516100aa959493929190610d3c565b60405180910390f35b6100cd60048036038101906100c89190610dbe565b6102db565b6040516100da9190610de9565b60405180910390f35b3480156100ee575f80fd5b506100f7610504565b6040516101049190610de9565b60405180910390f35b348015610118575f80fd5b50610133600480360381019061012e9190610bc6565b610509565b604051610144959493929190610d3c565b60405180910390f35b348015610158575f80fd5b50610173600480360381019061016e9190610bc6565b610622565b6040516101809190610e02565b60405180910390f35b348015610194575f80fd5b506101af60048036038101906101aa9190610f4e565b6107d2565b005b3480156101bc575f80fd5b506101d760048036038101906101d29190610bc6565b61096a565b005b6001602052805f5260405f205f91509050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600201549080600301805461024890610fd5565b80601f016020809104026020016040519081016040528092919081815260200182805461027490610fd5565b80156102bf5780601f10610296576101008083540402835291602001916102bf565b820191905f5260205f20905b8154815290600101906020018083116102a257829003601f168201915b505050505090806004015f9054906101000a900460ff16905085565b5f80341161031e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103159061104f565b60405180910390fd5b5f5490506040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200134815260200160405180602001604052805f81525081526020016001600381111561039357610392610cc9565b5b81525060015f8381526020019081526020015f205f820151815f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003019081610450919061120a565b506080820151816004015f6101000a81548160ff0219169083600381111561047b5761047a610cc9565b5b02179055509050505f8081548092919061049490611306565b91905055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16827fa1d51600bc538356bf8fd92c062edd8551d8ebffa6933a434365fbb0b2b6eb48346040516104f79190610de9565b60405180910390a4919050565b5f5481565b5f805f60605f8060015f8881526020019081526020015f209050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826002015483600301846004015f9054906101000a900460ff1681805461059090610fd5565b80601f01602080910402602001604051908101604052809291908181526020018280546105bc90610fd5565b80156106075780601f106105de57610100808354040283529160200191610607565b820191905f5260205f20905b8154815290600101906020018083116105ea57829003601f168201915b50505050509150955095509550955095505091939590929450565b60605f60015f8481526020019081526020015f209050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf906113bd565b60405180910390fd5b600260038111156106dc576106db610cc9565b5b816004015f9054906101000a900460ff1660038111156106ff576106fe610cc9565b5b1461073f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073690611425565b60405180910390fd5b80600301805461074e90610fd5565b80601f016020809104026020016040519081016040528092919081815260200182805461077a90610fd5565b80156107c55780601f1061079c576101008083540402835291602001916107c5565b820191905f5260205f20905b8154815290600101906020018083116107a857829003601f168201915b5050505050915050919050565b5f60015f8481526020019081526020015f209050806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086e9061148d565b60405180910390fd5b6001600381111561088b5761088a610cc9565b5b816004015f9054906101000a900460ff1660038111156108ae576108ad610cc9565b5b146108ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e5906114f5565b60405180910390fd5b818160030190816108ff919061120a565b506002816004015f6101000a81548160ff0219169083600381111561092757610926610cc9565b5b02179055507fe64f72f3fb0b359be658117d475a7e9105ed03068ede1ef5189beaddf4f8416f838360405161095d929190611513565b60405180910390a1505050565b5f60015f8381526020019081526020015f209050805f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a059061158b565b60405180910390fd5b60026003811115610a2257610a21610cc9565b5b816004015f9054906101000a900460ff166003811115610a4557610a44610cc9565b5b14610a85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7c90611425565b60405180910390fd5b6003816004015f6101000a81548160ff02191690836003811115610aac57610aab610cc9565b5b0217905550806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc826002015490811502906040515f60405180830381858888f19350505050158015610b1b573d5f803e3d5ffd5b507f90fe20ec2825e11e06afdcbf41b604101d2ce121c29c84e4f62d4bc1fda709b982826001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020154604051610b76939291906115a9565b60405180910390a15050565b5f604051905090565b5f80fd5b5f80fd5b5f819050919050565b610ba581610b93565b8114610baf575f80fd5b50565b5f81359050610bc081610b9c565b92915050565b5f60208284031215610bdb57610bda610b8b565b5b5f610be884828501610bb2565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610c1a82610bf1565b9050919050565b610c2a81610c10565b82525050565b610c3981610b93565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610c76578082015181840152602081019050610c5b565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610c9b82610c3f565b610ca58185610c49565b9350610cb5818560208601610c59565b610cbe81610c81565b840191505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60048110610d0757610d06610cc9565b5b50565b5f819050610d1782610cf6565b919050565b5f610d2682610d0a565b9050919050565b610d3681610d1c565b82525050565b5f60a082019050610d4f5f830188610c21565b610d5c6020830187610c21565b610d696040830186610c30565b8181036060830152610d7b8185610c91565b9050610d8a6080830184610d2d565b9695505050505050565b610d9d81610c10565b8114610da7575f80fd5b50565b5f81359050610db881610d94565b92915050565b5f60208284031215610dd357610dd2610b8b565b5b5f610de084828501610daa565b91505092915050565b5f602082019050610dfc5f830184610c30565b92915050565b5f6020820190508181035f830152610e1a8184610c91565b905092915050565b5f80fd5b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610e6082610c81565b810181811067ffffffffffffffff82111715610e7f57610e7e610e2a565b5b80604052505050565b5f610e91610b82565b9050610e9d8282610e57565b919050565b5f67ffffffffffffffff821115610ebc57610ebb610e2a565b5b610ec582610c81565b9050602081019050919050565b828183375f83830152505050565b5f610ef2610eed84610ea2565b610e88565b905082815260208101848484011115610f0e57610f0d610e26565b5b610f19848285610ed2565b509392505050565b5f82601f830112610f3557610f34610e22565b5b8135610f45848260208601610ee0565b91505092915050565b5f8060408385031215610f6457610f63610b8b565b5b5f610f7185828601610bb2565b925050602083013567ffffffffffffffff811115610f9257610f91610b8f565b5b610f9e85828601610f21565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610fec57607f821691505b602082108103610fff57610ffe610fa8565b5b50919050565b7f416d6f756e74206d7573742062652067726561746572207468616e20300000005f82015250565b5f611039601d83610c49565b915061104482611005565b602082019050919050565b5f6020820190508181035f8301526110668161102d565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026110c97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261108e565b6110d3868361108e565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61110e61110961110484610b93565b6110eb565b610b93565b9050919050565b5f819050919050565b611127836110f4565b61113b61113382611115565b84845461109a565b825550505050565b5f90565b61114f611143565b61115a81848461111e565b505050565b5b8181101561117d576111725f82611147565b600181019050611160565b5050565b601f8211156111c2576111938161106d565b61119c8461107f565b810160208510156111ab578190505b6111bf6111b78561107f565b83018261115f565b50505b505050565b5f82821c905092915050565b5f6111e25f19846008026111c7565b1980831691505092915050565b5f6111fa83836111d3565b9150826002028217905092915050565b61121382610c3f565b67ffffffffffffffff81111561122c5761122b610e2a565b5b6112368254610fd5565b611241828285611181565b5f60209050601f831160018114611272575f8415611260578287015190505b61126a85826111ef565b8655506112d1565b601f1984166112808661106d565b5f5b828110156112a757848901518255600182019150602085019450602081019050611282565b868310156112c457848901516112c0601f8916826111d3565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61131082610b93565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611342576113416112d9565b5b600182019050919050565b7f4f6e6c792062757965722063616e2061636365737320746865204950465320685f8201527f6173680000000000000000000000000000000000000000000000000000000000602082015250565b5f6113a7602383610c49565b91506113b28261134d565b604082019050919050565b5f6020820190508181035f8301526113d48161139b565b9050919050565b7f46696c65206e6f742072656769737465726564207965740000000000000000005f82015250565b5f61140f601783610c49565b915061141a826113db565b602082019050919050565b5f6020820190508181035f83015261143c81611403565b9050919050565b7f4f6e6c792073656c6c65722063616e2072656769737465722066696c650000005f82015250565b5f611477601d83610c49565b915061148282611443565b602082019050919050565b5f6020820190508181035f8301526114a48161146b565b9050919050565b7f4465616c206d75737420626520706169642066697273740000000000000000005f82015250565b5f6114df601783610c49565b91506114ea826114ab565b602082019050919050565b5f6020820190508181035f83015261150c816114d3565b9050919050565b5f6040820190506115265f830185610c30565b81810360208301526115388184610c91565b90509392505050565b7f4f6e6c792062757965722063616e20636f6e6669726d2064656c6976657279005f82015250565b5f611575601f83610c49565b915061158082611541565b602082019050919050565b5f6020820190508181035f8301526115a281611569565b9050919050565b5f6060820190506115bc5f830186610c30565b6115c96020830185610c21565b6115d66040830184610c30565b94935050505056fea26469706673582212207ad92eb146580b7cc11f2035ab1c071318971938ed1ba03f17ebbc7c479e352464736f6c63430008140033"; // 컴파일된 바이트코드

    protected FileDealSmartContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider gasProvider) {
        super(BINARY, contractAddress, web3j, credentials, gasProvider);
    }

    public static FileDealSmartContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider gasProvider) {
        return new FileDealSmartContract(contractAddress, web3j, credentials, gasProvider);
    }

    public RemoteFunctionCall<BigInteger> createDeal(
            String sellerAddress,
            BigInteger amount,
            Credentials credentials,
            ContractGasProvider gasProvider
    ) {
        final Function function = new Function(
                "createDeal",
                Arrays.asList(new Address(sellerAddress)),
                Collections.emptyList() // returns handled manually
        );
        final String senderAddress = credentials.getAddress();

        return new RemoteFunctionCall<>(function, () -> {
            String encodedFunction = FunctionEncoder.encode(function);

            EthSendTransaction transactionResponse = web3j.ethSendTransaction(Transaction.createFunctionCallTransaction(
                    senderAddress,
                    null,
                    gasProvider.getGasPrice("createDeal"),
                    gasProvider.getGasLimit("createDeal"),
                    getContractAddress(),
                    amount,
                    encodedFunction
            )).send();

            String txHash = transactionResponse.getTransactionHash();

            TransactionReceipt receipt = web3j.ethGetTransactionReceipt(txHash)
                    .send()
                    .getTransactionReceipt()
                    .orElseThrow(() -> new RuntimeException("No receipt found"));

            // DealCreated 이벤트 파싱
            Event event = new Event("DealCreated",
                    Arrays.asList(
                            new TypeReference<Uint256>(true) {}, // dealId (indexed)
                            new TypeReference<Address>(true) {}, // buyer
                            new TypeReference<Address>(true) {}, // seller
                            new TypeReference<Uint256>() {}      // amount
                    )
            );

            List<EventValuesWithLog> logs = extractEventParametersWithLog(event, receipt);
            if (!logs.isEmpty()) {
                Uint256 dealId = (Uint256) logs.get(0).getIndexedValues().get(0);
                return dealId.getValue();
            }

            throw new RuntimeException("dealId not found in logs");
        });
    }

    public RemoteFunctionCall<TransactionReceipt> registerFile(BigInteger dealId, String ipfsHash) {
        Function function = new Function(
                "registerFile",
                List.of(new Uint256(dealId), new Utf8String(ipfsHash)),
                Collections.emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> confirmDelivery(BigInteger dealId) {
        Function function = new Function(
                "confirmDelivery",
                List.of(new Uint256(dealId)),
                Collections.emptyList()
        );
        return executeRemoteCallTransaction(function);
    }
}
