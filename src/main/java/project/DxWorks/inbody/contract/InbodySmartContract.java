package project.DxWorks.inbody.contract;

import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.FunctionReturnDecoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.Transaction;
import org.web3j.protocol.core.methods.response.EthCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.gas.ContractGasProvider;
import project.DxWorks.inbody.dto.InbodyDto;
import project.DxWorks.inbody.struct.InbodyStruct;

import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class InbodySmartContract extends Contract {
    public static final String BINARY = "608060405234801561000f575f80fd5b506114778061001d5f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c806361a55b471461004357806382a6c0ac1461005f578063e76637ce14610099575b5f80fd5b61005d60048036038101906100589190610bae565b6100b7565b005b61007960048036038101906100749190610d9d565b610273565b6040516100909b9a99989796959493929190610e64565b60405180910390f35b6100a1610606565b6040516100ae9190611158565b60405180910390f35b5f6040518061016001604052808d81526020018c81526020018b81526020018a81526020018981526020018881526020018781526020018681526020018581526020018481526020018381525090505f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081908060018154018082558091505060019003905f5260205f2090600b02015f909190919091505f820151815f01908161017c9190611372565b5060208201518160010190816101929190611372565b5060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070190816101da9190611372565b506101008201518160080190816101f19190611372565b506101208201518160090190816102089190611372565b5061014082015181600a01908161021f9190611372565b5050503373ffffffffffffffffffffffffffffffffffffffff167f4b1e240d9ef9a3e4ac24469ab5dbc73c5fb528ede9b4281c5d58316fca1e3f0960405160405180910390a2505050505050505050505050565b5f602052815f5260405f20818154811061028b575f80fd5b905f5260205f2090600b02015f9150915050805f0180546102ab906111a5565b80601f01602080910402602001604051908101604052809291908181526020018280546102d7906111a5565b80156103225780601f106102f957610100808354040283529160200191610322565b820191905f5260205f20905b81548152906001019060200180831161030557829003601f168201915b505050505090806001018054610337906111a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610363906111a5565b80156103ae5780601f10610385576101008083540402835291602001916103ae565b820191905f5260205f20905b81548152906001019060200180831161039157829003601f168201915b5050505050908060020154908060030154908060040154908060050154908060060154908060070180546103e1906111a5565b80601f016020809104026020016040519081016040528092919081815260200182805461040d906111a5565b80156104585780601f1061042f57610100808354040283529160200191610458565b820191905f5260205f20905b81548152906001019060200180831161043b57829003601f168201915b50505050509080600801805461046d906111a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610499906111a5565b80156104e45780601f106104bb576101008083540402835291602001916104e4565b820191905f5260205f20905b8154815290600101906020018083116104c757829003601f168201915b5050505050908060090180546104f9906111a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610525906111a5565b80156105705780601f1061054757610100808354040283529160200191610570565b820191905f5260205f20905b81548152906001019060200180831161055357829003601f168201915b50505050509080600a018054610585906111a5565b80601f01602080910402602001604051908101604052809291908181526020018280546105b1906111a5565b80156105fc5780601f106105d3576101008083540402835291602001916105fc565b820191905f5260205f20905b8154815290600101906020018083116105df57829003601f168201915b505050505090508b565b60605f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015610a25578382905f5260205f2090600b0201604051806101600160405290815f82018054610694906111a5565b80601f01602080910402602001604051908101604052809291908181526020018280546106c0906111a5565b801561070b5780601f106106e25761010080835404028352916020019161070b565b820191905f5260205f20905b8154815290600101906020018083116106ee57829003601f168201915b50505050508152602001600182018054610724906111a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610750906111a5565b801561079b5780601f106107725761010080835404028352916020019161079b565b820191905f5260205f20905b81548152906001019060200180831161077e57829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820180546107e6906111a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610812906111a5565b801561085d5780601f106108345761010080835404028352916020019161085d565b820191905f5260205f20905b81548152906001019060200180831161084057829003601f168201915b50505050508152602001600882018054610876906111a5565b80601f01602080910402602001604051908101604052809291908181526020018280546108a2906111a5565b80156108ed5780601f106108c4576101008083540402835291602001916108ed565b820191905f5260205f20905b8154815290600101906020018083116108d057829003601f168201915b50505050508152602001600982018054610906906111a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610932906111a5565b801561097d5780601f106109545761010080835404028352916020019161097d565b820191905f5260205f20905b81548152906001019060200180831161096057829003601f168201915b50505050508152602001600a82018054610996906111a5565b80601f01602080910402602001604051908101604052809291908181526020018280546109c2906111a5565b8015610a0d5780601f106109e457610100808354040283529160200191610a0d565b820191905f5260205f20905b8154815290600101906020018083116109f057829003601f168201915b50505050508152505081526020019060010190610663565b50505050905090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610a8d82610a47565b810181811067ffffffffffffffff82111715610aac57610aab610a57565b5b80604052505050565b5f610abe610a2e565b9050610aca8282610a84565b919050565b5f67ffffffffffffffff821115610ae957610ae8610a57565b5b610af282610a47565b9050602081019050919050565b828183375f83830152505050565b5f610b1f610b1a84610acf565b610ab5565b905082815260208101848484011115610b3b57610b3a610a43565b5b610b46848285610aff565b509392505050565b5f82601f830112610b6257610b61610a3f565b5b8135610b72848260208601610b0d565b91505092915050565b5f819050919050565b610b8d81610b7b565b8114610b97575f80fd5b50565b5f81359050610ba881610b84565b92915050565b5f805f805f805f805f805f6101608c8e031215610bce57610bcd610a37565b5b5f8c013567ffffffffffffffff811115610beb57610bea610a3b565b5b610bf78e828f01610b4e565b9b505060208c013567ffffffffffffffff811115610c1857610c17610a3b565b5b610c248e828f01610b4e565b9a50506040610c358e828f01610b9a565b9950506060610c468e828f01610b9a565b9850506080610c578e828f01610b9a565b97505060a0610c688e828f01610b9a565b96505060c0610c798e828f01610b9a565b95505060e08c013567ffffffffffffffff811115610c9a57610c99610a3b565b5b610ca68e828f01610b4e565b9450506101008c013567ffffffffffffffff811115610cc857610cc7610a3b565b5b610cd48e828f01610b4e565b9350506101208c013567ffffffffffffffff811115610cf657610cf5610a3b565b5b610d028e828f01610b4e565b9250506101408c013567ffffffffffffffff811115610d2457610d23610a3b565b5b610d308e828f01610b4e565b9150509295989b509295989b9093969950565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610d6c82610d43565b9050919050565b610d7c81610d62565b8114610d86575f80fd5b50565b5f81359050610d9781610d73565b92915050565b5f8060408385031215610db357610db2610a37565b5b5f610dc085828601610d89565b9250506020610dd185828601610b9a565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610e12578082015181840152602081019050610df7565b5f8484015250505050565b5f610e2782610ddb565b610e318185610de5565b9350610e41818560208601610df5565b610e4a81610a47565b840191505092915050565b610e5e81610b7b565b82525050565b5f610160820190508181035f830152610e7d818e610e1d565b90508181036020830152610e91818d610e1d565b9050610ea0604083018c610e55565b610ead606083018b610e55565b610eba608083018a610e55565b610ec760a0830189610e55565b610ed460c0830188610e55565b81810360e0830152610ee68187610e1d565b9050818103610100830152610efb8186610e1d565b9050818103610120830152610f108185610e1d565b9050818103610140830152610f258184610e1d565b90509c9b505050505050505050505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f610f7a82610ddb565b610f848185610f60565b9350610f94818560208601610df5565b610f9d81610a47565b840191505092915050565b610fb181610b7b565b82525050565b5f61016083015f8301518482035f860152610fd28282610f70565b91505060208301518482036020860152610fec8282610f70565b91505060408301516110016040860182610fa8565b5060608301516110146060860182610fa8565b5060808301516110276080860182610fa8565b5060a083015161103a60a0860182610fa8565b5060c083015161104d60c0860182610fa8565b5060e083015184820360e08601526110658282610f70565b9150506101008301518482036101008601526110818282610f70565b91505061012083015184820361012086015261109d8282610f70565b9150506101408301518482036101408601526110b98282610f70565b9150508091505092915050565b5f6110d18383610fb7565b905092915050565b5f602082019050919050565b5f6110ef82610f37565b6110f98185610f41565b93508360208202850161110b85610f51565b805f5b85811015611146578484038952815161112785826110c6565b9450611132836110d9565b925060208a0199505060018101905061110e565b50829750879550505050505092915050565b5f6020820190508181035f83015261117081846110e5565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806111bc57607f821691505b6020821081036111cf576111ce611178565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026112317fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826111f6565b61123b86836111f6565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61127661127161126c84610b7b565b611253565b610b7b565b9050919050565b5f819050919050565b61128f8361125c565b6112a361129b8261127d565b848454611202565b825550505050565b5f90565b6112b76112ab565b6112c2818484611286565b505050565b5b818110156112e5576112da5f826112af565b6001810190506112c8565b5050565b601f82111561132a576112fb816111d5565b611304846111e7565b81016020851015611313578190505b61132761131f856111e7565b8301826112c7565b50505b505050565b5f82821c905092915050565b5f61134a5f198460080261132f565b1980831691505092915050565b5f611362838361133b565b9150826002028217905092915050565b61137b82610ddb565b67ffffffffffffffff81111561139457611393610a57565b5b61139e82546111a5565b6113a98282856112e9565b5f60209050601f8311600181146113da575f84156113c8578287015190505b6113d28582611357565b865550611439565b601f1984166113e8866111d5565b5f5b8281101561140f578489015182556001820191506020850194506020810190506113ea565b8683101561142c5784890151611428601f89168261133b565b8355505b6001600288020188555050505b50505050505056fea26469706673582212205bcd88c9fbac0d5f83d05e04bb0882a40d1ab23cea66e36b31ccedbb52921db664736f6c63430008140033"; // 스마트컨트랙트 바이트코드 (생략 가능)

    protected InbodySmartContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider gasProvider) {
        super(BINARY, contractAddress, web3j, credentials, gasProvider);
    }

    public static InbodySmartContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider gasProvider) {
        return new InbodySmartContract(contractAddress, web3j, credentials, gasProvider);
    }

    // 인바디 정보 등록
    public RemoteFunctionCall<TransactionReceipt> addInbody(
            String createdAt,
            String gender,
            BigInteger height,
            BigInteger weight,
            BigInteger muscle,
            BigInteger fat,
            BigInteger bmi,
            String userCase,
            String armGrade,
            String bodyGrade,
            String legGrade
    ) {
        final Function function = new Function(
                "addInbody",
                Arrays.<Type>asList(
                        new Utf8String(createdAt),
                        new Utf8String(gender),
                        new Uint256(height),
                        new Uint256(weight),
                        new Uint256(muscle),
                        new Uint256(fat),
                        new Uint256(bmi),
                        new Utf8String(userCase),
                        new Utf8String(armGrade),
                        new Utf8String(bodyGrade),
                        new Utf8String(legGrade)
                ),
                Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }


    // 인바디 정보 가져오기
    public List<InbodyDto> getMyRecords(Web3j web3j, String walletAddress, String contractAddress) throws IOException {
        Function function = new Function(
                "getMyRecords",
                Collections.emptyList(),
                List.of(new TypeReference<DynamicArray<InbodyStruct>>() {})
        );

        String encoded = FunctionEncoder.encode(function);

        EthCall response = web3j.ethCall(
                Transaction.createEthCallTransaction(walletAddress, contractAddress, encoded),
                DefaultBlockParameterName.LATEST
        ).send();

        List<Type> decoded = FunctionReturnDecoder.decode(response.getValue(), function.getOutputParameters());
        List<InbodyDto> result = new ArrayList<>();

        if (!decoded.isEmpty()) {
            List<DynamicStruct> records = (List<DynamicStruct>) decoded.get(0).getValue();

            for (DynamicStruct record : records) {
                List<Type> fields = record.getValue();

                InbodyDto dto = new InbodyDto(
                        fields.get(0).getValue().toString(),                           // createdAt
                        fields.get(1).getValue().toString(),                           // gender
                        ((BigInteger) fields.get(2).getValue()).doubleValue()/10,         // height
                        ((BigInteger) fields.get(3).getValue()).doubleValue()/10,         // weight
                        ((BigInteger) fields.get(4).getValue()).doubleValue()/10,         // muscle
                        ((BigInteger) fields.get(5).getValue()).doubleValue()/10,         // fat
                        ((BigInteger) fields.get(6).getValue()).doubleValue()/10,         // bmi
                        fields.get(7).getValue().toString(),                           // userCase
                        fields.get(8).getValue().toString(),                           // armGrade
                        fields.get(9).getValue().toString(),                           // bodyGrade
                        fields.get(10).getValue().toString()                           // legGrade
                );
                result.add(dto);
            }
        }

        return result;
    }


}
