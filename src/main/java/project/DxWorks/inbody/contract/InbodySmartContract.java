package project.DxWorks.inbody.contract;

import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.FunctionReturnDecoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.Transaction;
import org.web3j.protocol.core.methods.response.EthCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.gas.ContractGasProvider;
import project.DxWorks.inbody.dto.PostInbodyRequestDto;
import project.DxWorks.inbody.struct.InbodyStruct;
import project.DxWorks.post.entity.Post;

import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class InbodySmartContract extends Contract {
    public static final String BINARY = "608060405234801561000f575f80fd5b506116fb8061001d5f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c8063643ca1841461004357806382a6c0ac1461005f578063e76637ce14610099575b5f80fd5b61005d60048036038101906100589190610dde565b6100b7565b005b61007960048036038101906100749190611005565b61028b565b6040516100909b9a999897969594939291906110cc565b60405180910390f35b6100a161072a565b6040516100ae91906113dc565b60405180910390f35b5f6040518061016001604052808d81526020018c81526020018b81526020018a81526020018981526020018881526020018781526020018681526020018581526020018481526020018381525090505f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081908060018154018082558091505060019003905f5260205f2090600b02015f909190919091505f820151815f01908161017c91906115f6565b50602082015181600101908161019291906115f6565b5060408201518160020155606082015181600301556080820151816004015560a08201518160050190816101c691906115f6565b5060c08201518160060190816101dc91906115f6565b5060e08201518160070190816101f291906115f6565b5061010082015181600801908161020991906115f6565b5061012082015181600901908161022091906115f6565b5061014082015181600a01908161023791906115f6565b5050503373ffffffffffffffffffffffffffffffffffffffff167f4b1e240d9ef9a3e4ac24469ab5dbc73c5fb528ede9b4281c5d58316fca1e3f0960405160405180910390a2505050505050505050505050565b5f602052815f5260405f2081815481106102a3575f80fd5b905f5260205f2090600b02015f9150915050805f0180546102c390611429565b80601f01602080910402602001604051908101604052809291908181526020018280546102ef90611429565b801561033a5780601f106103115761010080835404028352916020019161033a565b820191905f5260205f20905b81548152906001019060200180831161031d57829003601f168201915b50505050509080600101805461034f90611429565b80601f016020809104026020016040519081016040528092919081815260200182805461037b90611429565b80156103c65780601f1061039d576101008083540402835291602001916103c6565b820191905f5260205f20905b8154815290600101906020018083116103a957829003601f168201915b5050505050908060020154908060030154908060040154908060050180546103ed90611429565b80601f016020809104026020016040519081016040528092919081815260200182805461041990611429565b80156104645780601f1061043b57610100808354040283529160200191610464565b820191905f5260205f20905b81548152906001019060200180831161044757829003601f168201915b50505050509080600601805461047990611429565b80601f01602080910402602001604051908101604052809291908181526020018280546104a590611429565b80156104f05780601f106104c7576101008083540402835291602001916104f0565b820191905f5260205f20905b8154815290600101906020018083116104d357829003601f168201915b50505050509080600701805461050590611429565b80601f016020809104026020016040519081016040528092919081815260200182805461053190611429565b801561057c5780601f106105535761010080835404028352916020019161057c565b820191905f5260205f20905b81548152906001019060200180831161055f57829003601f168201915b50505050509080600801805461059190611429565b80601f01602080910402602001604051908101604052809291908181526020018280546105bd90611429565b80156106085780601f106105df57610100808354040283529160200191610608565b820191905f5260205f20905b8154815290600101906020018083116105eb57829003601f168201915b50505050509080600901805461061d90611429565b80601f016020809104026020016040519081016040528092919081815260200182805461064990611429565b80156106945780601f1061066b57610100808354040283529160200191610694565b820191905f5260205f20905b81548152906001019060200180831161067757829003601f168201915b50505050509080600a0180546106a990611429565b80601f01602080910402602001604051908101604052809291908181526020018280546106d590611429565b80156107205780601f106106f757610100808354040283529160200191610720565b820191905f5260205f20905b81548152906001019060200180831161070357829003601f168201915b505050505090508b565b60605f803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b82821015610c55578382905f5260205f2090600b0201604051806101600160405290815f820180546107b890611429565b80601f01602080910402602001604051908101604052809291908181526020018280546107e490611429565b801561082f5780601f106108065761010080835404028352916020019161082f565b820191905f5260205f20905b81548152906001019060200180831161081257829003601f168201915b5050505050815260200160018201805461084890611429565b80601f016020809104026020016040519081016040528092919081815260200182805461087490611429565b80156108bf5780601f10610896576101008083540402835291602001916108bf565b820191905f5260205f20905b8154815290600101906020018083116108a257829003601f168201915b505050505081526020016002820154815260200160038201548152602001600482015481526020016005820180546108f690611429565b80601f016020809104026020016040519081016040528092919081815260200182805461092290611429565b801561096d5780601f106109445761010080835404028352916020019161096d565b820191905f5260205f20905b81548152906001019060200180831161095057829003601f168201915b5050505050815260200160068201805461098690611429565b80601f01602080910402602001604051908101604052809291908181526020018280546109b290611429565b80156109fd5780601f106109d4576101008083540402835291602001916109fd565b820191905f5260205f20905b8154815290600101906020018083116109e057829003601f168201915b50505050508152602001600782018054610a1690611429565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4290611429565b8015610a8d5780601f10610a6457610100808354040283529160200191610a8d565b820191905f5260205f20905b815481529060010190602001808311610a7057829003601f168201915b50505050508152602001600882018054610aa690611429565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad290611429565b8015610b1d5780601f10610af457610100808354040283529160200191610b1d565b820191905f5260205f20905b815481529060010190602001808311610b0057829003601f168201915b50505050508152602001600982018054610b3690611429565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6290611429565b8015610bad5780601f10610b8457610100808354040283529160200191610bad565b820191905f5260205f20905b815481529060010190602001808311610b9057829003601f168201915b50505050508152602001600a82018054610bc690611429565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf290611429565b8015610c3d5780601f10610c1457610100808354040283529160200191610c3d565b820191905f5260205f20905b815481529060010190602001808311610c2057829003601f168201915b50505050508152505081526020019060010190610787565b50505050905090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610cbd82610c77565b810181811067ffffffffffffffff82111715610cdc57610cdb610c87565b5b80604052505050565b5f610cee610c5e565b9050610cfa8282610cb4565b919050565b5f67ffffffffffffffff821115610d1957610d18610c87565b5b610d2282610c77565b9050602081019050919050565b828183375f83830152505050565b5f610d4f610d4a84610cff565b610ce5565b905082815260208101848484011115610d6b57610d6a610c73565b5b610d76848285610d2f565b509392505050565b5f82601f830112610d9257610d91610c6f565b5b8135610da2848260208601610d3d565b91505092915050565b5f819050919050565b610dbd81610dab565b8114610dc7575f80fd5b50565b5f81359050610dd881610db4565b92915050565b5f805f805f805f805f805f6101608c8e031215610dfe57610dfd610c67565b5b5f8c013567ffffffffffffffff811115610e1b57610e1a610c6b565b5b610e278e828f01610d7e565b9b505060208c013567ffffffffffffffff811115610e4857610e47610c6b565b5b610e548e828f01610d7e565b9a50506040610e658e828f01610dca565b9950506060610e768e828f01610dca565b9850506080610e878e828f01610dca565b97505060a08c013567ffffffffffffffff811115610ea857610ea7610c6b565b5b610eb48e828f01610d7e565b96505060c08c013567ffffffffffffffff811115610ed557610ed4610c6b565b5b610ee18e828f01610d7e565b95505060e08c013567ffffffffffffffff811115610f0257610f01610c6b565b5b610f0e8e828f01610d7e565b9450506101008c013567ffffffffffffffff811115610f3057610f2f610c6b565b5b610f3c8e828f01610d7e565b9350506101208c013567ffffffffffffffff811115610f5e57610f5d610c6b565b5b610f6a8e828f01610d7e565b9250506101408c013567ffffffffffffffff811115610f8c57610f8b610c6b565b5b610f988e828f01610d7e565b9150509295989b509295989b9093969950565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610fd482610fab565b9050919050565b610fe481610fca565b8114610fee575f80fd5b50565b5f81359050610fff81610fdb565b92915050565b5f806040838503121561101b5761101a610c67565b5b5f61102885828601610ff1565b925050602061103985828601610dca565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561107a57808201518184015260208101905061105f565b5f8484015250505050565b5f61108f82611043565b611099818561104d565b93506110a981856020860161105d565b6110b281610c77565b840191505092915050565b6110c681610dab565b82525050565b5f610160820190508181035f8301526110e5818e611085565b905081810360208301526110f9818d611085565b9050611108604083018c6110bd565b611115606083018b6110bd565b611122608083018a6110bd565b81810360a08301526111348189611085565b905081810360c08301526111488188611085565b905081810360e083015261115c8187611085565b90508181036101008301526111718186611085565b90508181036101208301526111868185611085565b905081810361014083015261119b8184611085565b90509c9b505050505050505050505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f6111f082611043565b6111fa81856111d6565b935061120a81856020860161105d565b61121381610c77565b840191505092915050565b61122781610dab565b82525050565b5f61016083015f8301518482035f86015261124882826111e6565b9150506020830151848203602086015261126282826111e6565b9150506040830151611277604086018261121e565b50606083015161128a606086018261121e565b50608083015161129d608086018261121e565b5060a083015184820360a08601526112b582826111e6565b91505060c083015184820360c08601526112cf82826111e6565b91505060e083015184820360e08601526112e982826111e6565b91505061010083015184820361010086015261130582826111e6565b91505061012083015184820361012086015261132182826111e6565b91505061014083015184820361014086015261133d82826111e6565b9150508091505092915050565b5f611355838361122d565b905092915050565b5f602082019050919050565b5f611373826111ad565b61137d81856111b7565b93508360208202850161138f856111c7565b805f5b858110156113ca57848403895281516113ab858261134a565b94506113b68361135d565b925060208a01995050600181019050611392565b50829750879550505050505092915050565b5f6020820190508181035f8301526113f48184611369565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061144057607f821691505b602082108103611453576114526113fc565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026114b57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261147a565b6114bf868361147a565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6114fa6114f56114f084610dab565b6114d7565b610dab565b9050919050565b5f819050919050565b611513836114e0565b61152761151f82611501565b848454611486565b825550505050565b5f90565b61153b61152f565b61154681848461150a565b505050565b5b818110156115695761155e5f82611533565b60018101905061154c565b5050565b601f8211156115ae5761157f81611459565b6115888461146b565b81016020851015611597578190505b6115ab6115a38561146b565b83018261154b565b50505b505050565b5f82821c905092915050565b5f6115ce5f19846008026115b3565b1980831691505092915050565b5f6115e683836115bf565b9150826002028217905092915050565b6115ff82611043565b67ffffffffffffffff81111561161857611617610c87565b5b6116228254611429565b61162d82828561156d565b5f60209050601f83116001811461165e575f841561164c578287015190505b61165685826115db565b8655506116bd565b601f19841661166c86611459565b5f5b828110156116935784890151825560018201915060208501945060208101905061166e565b868310156116b057848901516116ac601f8916826115bf565b8355505b6001600288020188555050505b50505050505056fea26469706673582212207c69ba10510079c44feb3cf6adea9cf62b1d2bab90f6f1e6e89f17c440818da664736f6c63430008140033"; // 스마트컨트랙트 바이트코드 (생략 가능)

    protected InbodySmartContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider gasProvider) {
        super(BINARY, contractAddress, web3j, credentials, gasProvider);
    }

    public static InbodySmartContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider gasProvider) {
        return new InbodySmartContract(contractAddress, web3j, credentials, gasProvider);
    }

    // 인바디 정보 등록
    public RemoteFunctionCall<TransactionReceipt> addInbody(
            String createdAt,
            String gender,
            BigInteger weight,
            BigInteger muscleMass,
            BigInteger fatRatio,
            String muscleMassType,
            String fatMassType,
            String userCase,
            String armMuscleType,
            String trunkMuscleType,
            String legMuscleType
    ) {
        final Function function = new Function(
                "addInbody",
                Arrays.<Type>asList(
                        new Utf8String(createdAt),
                        new Utf8String(gender),
                        new Uint256(weight),
                        new Uint256(muscleMass),
                        new Uint256(fatRatio),
                        new Utf8String(muscleMassType),
                        new Utf8String(fatMassType),
                        new Utf8String(userCase),
                        new Utf8String(armMuscleType),
                        new Utf8String(trunkMuscleType),
                        new Utf8String(legMuscleType)
                ),
                Collections.<TypeReference<?>>emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    // 인바디 정보 가져오기
    public List<PostInbodyRequestDto> getMyRecords(Web3j web3j, String walletAddress, String contractAddress) throws IOException {
        // 스마트 컨트랙트 Web3j 함수 설정
        Function function = new Function(
                "getMyRecords",
                Collections.emptyList(),
                List.of(new TypeReference<DynamicArray<InbodyStruct>>() {})
        );


        String encoded = FunctionEncoder.encode(function);


        // 저수준 스마트컨트랙트 읽기
        EthCall response = web3j.ethCall(
                Transaction.createEthCallTransaction(walletAddress, contractAddress, encoded),
                DefaultBlockParameterName.LATEST
        ).send();

        List<Type> decoded = FunctionReturnDecoder.decode(response.getValue(), function.getOutputParameters());

        // 반환 리스트
        List<PostInbodyRequestDto> result = new ArrayList<>();

        if (!decoded.isEmpty()) {
            List<DynamicStruct> records = (List<DynamicStruct>) decoded.get(0).getValue();

            for (DynamicStruct record : records) {
                List<Type> fields = record.getValue();

                PostInbodyRequestDto dto = new PostInbodyRequestDto(
                        fields.get(0).getValue().toString(), // createdAt
                        fields.get(1).getValue().toString(), // gender
                        ((BigInteger) fields.get(2).getValue()).doubleValue() / 10, // weight
                        ((BigInteger) fields.get(3).getValue()).doubleValue() / 10, // muscleMass
                        ((BigInteger) fields.get(4).getValue()).doubleValue() / 10, // fatRatio
                        fields.get(5).getValue().toString(), // muscleMassType
                        fields.get(6).getValue().toString(), // fatMassType
                        fields.get(7).getValue().toString(), // userCase
                        fields.get(8).getValue().toString(), // armMuscleType
                        fields.get(9).getValue().toString(), // trunkMuscleType
                        fields.get(10).getValue().toString() // legMuscleType)

                );
                result.add(dto);
            }
        }

        return result;
    }

}
