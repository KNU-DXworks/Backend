package project.DxWorks.transaction.contract;

import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.FunctionReturnDecoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.Transaction;
import org.web3j.protocol.core.methods.response.EthCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.gas.ContractGasProvider;
import project.DxWorks.transaction.dto.TransactionDto;
import project.DxWorks.transaction.struct.TransactionStruct;

import java.io.IOException;
import java.math.BigInteger;
import java.util.*;

public class TransactionContract extends Contract {

    public static final String BINARY = "608060405260015f55348015610013575f80fd5b50611891806100215f395ff3fe608060405234801561000f575f80fd5b506004361061007a575f3560e01c806388fa40691161005957806388fa4069146100ed5780639ace38c214610109578063c3d68d431461013e578063d7ca38f31461015a5761007a565b8062e9c0061461007e57806333ea3dc81461009a57806383920e90146100cf575b5f80fd5b61009860048036038101906100939190610c9f565b610178565b005b6100b460048036038101906100af9190610c9f565b610292565b6040516100c696959493929190610da2565b60405180910390f35b6100d76103a7565b6040516100e49190610faf565b60405180910390f35b61010760048036038101906101029190611030565b61063c565b005b610123600480360381019061011e9190610c9f565b610705565b60405161013596959493929190610da2565b60405180910390f35b610158600480360381019061015391906110de565b610801565b005b610162610a44565b60405161016f9190611162565b60405180910390f35b5f60015f8381526020019081526020015f20905061019581610a49565b6101d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cb906111eb565b60405180910390fd5b60015f8381526020019081526020015f205f8082015f9055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f9055600382015f9055600482015f61022f9190610baf565b600582015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550507f4557095eb267dfd5f7e33f676e26d820f8221c17988aea42c6776b36f31f06a0826040516102869190611162565b60405180910390a15050565b5f805f8060605f8060015f8981526020019081526020015f209050805f0154816001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260020154836003015484600401856005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681805461031390611236565b80601f016020809104026020016040519081016040528092919081815260200182805461033f90611236565b801561038a5780601f106103615761010080835404028352916020019161038a565b820191905f5260205f20905b81548152906001019060200180831161036d57829003601f168201915b505050505091509650965096509650965096505091939550919395565b60605f80600190505b5f548110156103f9576103d260015f8381526020019081526020015f20610afc565b156103e65781806103e290611293565b9250505b80806103f190611293565b9150506103b0565b505f8167ffffffffffffffff811115610415576104146112da565b5b60405190808252806020026020018201604052801561044e57816020015b61043b610bec565b8152602001906001900390816104335790505b5090505f80600190505b5f548110156106325761047a60015f8381526020019081526020015f20610afc565b1561061f5760015f8281526020019081526020015f206040518060c00160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201805461051d90611236565b80601f016020809104026020016040519081016040528092919081815260200182805461054990611236565b80156105945780601f1061056b57610100808354040283529160200191610594565b820191905f5260205f20905b81548152906001019060200180831161057757829003601f168201915b50505050508152602001600582015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505083838151811061060557610604611307565b5b6020026020010181905250818061061b90611293565b9250505b808061062a90611293565b915050610458565b5081935050505090565b5f60015f8781526020019081526020015f20905061065981610a49565b610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068f906113a4565b60405180910390fd5b84816002018190555083816003018190555082828260040191826106bd929190611569565b507f62a5cb17bd0bdb4655ed5e60656f59f26b74f6f8c3c916a48b6e968cdbb5e5f186868686866040516106f5959493929190611670565b60405180910390a1505050505050565b6001602052805f5260405f205f91509050805f015490806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600201549080600301549080600401805461075b90611236565b80601f016020809104026020016040519081016040528092919081815260200182805461078790611236565b80156107d25780601f106107a9576101008083540402835291602001916107d2565b820191905f5260205f20905b8154815290600101906020018083116107b557829003601f168201915b505050505090806005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086565b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361086f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086690611706565b60405180910390fd5b5f6040518060c001604052805f5481526020018773ffffffffffffffffffffffffffffffffffffffff16815260200186815260200185815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081526020013373ffffffffffffffffffffffffffffffffffffffff1681525090508060015f805481526020019081526020015f205f820151815f01556020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040190816109999190611724565b5060a0820151816005015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507e3e6f8150252454cffc86a370622ad98e102cf98615a96391843f7790d289ef5f54878787878733604051610a1e97969594939291906117f3565b60405180910390a15f80815480929190610a3790611293565b9190505550505050505050565b5f5481565b5f816005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610af55750816001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b5f3373ffffffffffffffffffffffffffffffffffffffff16826005015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480610ba857503373ffffffffffffffffffffffffffffffffffffffff16826001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b508054610bbb90611236565b5f825580601f10610bcc5750610be9565b601f0160209004905f5260205f2090810190610be89190610c49565b5b50565b6040518060c001604052805f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f8152602001606081526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b5b80821115610c60575f815f905550600101610c4a565b5090565b5f80fd5b5f80fd5b5f819050919050565b610c7e81610c6c565b8114610c88575f80fd5b50565b5f81359050610c9981610c75565b92915050565b5f60208284031215610cb457610cb3610c64565b5b5f610cc184828501610c8b565b91505092915050565b610cd381610c6c565b82525050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610d0282610cd9565b9050919050565b610d1281610cf8565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610d4f578082015181840152602081019050610d34565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610d7482610d18565b610d7e8185610d22565b9350610d8e818560208601610d32565b610d9781610d5a565b840191505092915050565b5f60c082019050610db55f830189610cca565b610dc26020830188610d09565b610dcf6040830187610cca565b610ddc6060830186610cca565b8181036080830152610dee8185610d6a565b9050610dfd60a0830184610d09565b979650505050505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b610e3a81610c6c565b82525050565b610e4981610cf8565b82525050565b5f82825260208201905092915050565b5f610e6982610d18565b610e738185610e4f565b9350610e83818560208601610d32565b610e8c81610d5a565b840191505092915050565b5f60c083015f830151610eac5f860182610e31565b506020830151610ebf6020860182610e40565b506040830151610ed26040860182610e31565b506060830151610ee56060860182610e31565b5060808301518482036080860152610efd8282610e5f565b91505060a0830151610f1260a0860182610e40565b508091505092915050565b5f610f288383610e97565b905092915050565b5f602082019050919050565b5f610f4682610e08565b610f508185610e12565b935083602082028501610f6285610e22565b805f5b85811015610f9d5784840389528151610f7e8582610f1d565b9450610f8983610f30565b925060208a01995050600181019050610f65565b50829750879550505050505092915050565b5f6020820190508181035f830152610fc78184610f3c565b905092915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112610ff057610fef610fcf565b5b8235905067ffffffffffffffff81111561100d5761100c610fd3565b5b60208301915083600182028301111561102957611028610fd7565b5b9250929050565b5f805f805f6080868803121561104957611048610c64565b5b5f61105688828901610c8b565b955050602061106788828901610c8b565b945050604061107888828901610c8b565b935050606086013567ffffffffffffffff81111561109957611098610c68565b5b6110a588828901610fdb565b92509250509295509295909350565b6110bd81610cf8565b81146110c7575f80fd5b50565b5f813590506110d8816110b4565b92915050565b5f805f805f608086880312156110f7576110f6610c64565b5b5f611104888289016110ca565b955050602061111588828901610c8b565b945050604061112688828901610c8b565b935050606086013567ffffffffffffffff81111561114757611146610c68565b5b61115388828901610fdb565b92509250509295509295909350565b5f6020820190506111755f830184610cca565b92915050565b7f4163636573732064656e6965643a206f6e6c79206f776e65722063616e2064655f8201527f6c65746500000000000000000000000000000000000000000000000000000000602082015250565b5f6111d5602483610d22565b91506111e08261117b565b604082019050919050565b5f6020820190508181035f830152611202816111c9565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061124d57607f821691505b6020821081036112605761125f611209565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61129d82610c6c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036112cf576112ce611266565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4163636573732064656e6965643a206f6e6c79206f776e65722063616e2075705f8201527f6461746500000000000000000000000000000000000000000000000000000000602082015250565b5f61138e602483610d22565b915061139982611334565b604082019050919050565b5f6020820190508181035f8301526113bb81611382565b9050919050565b5f82905092915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026114287fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826113ed565b61143286836113ed565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61146d61146861146384610c6c565b61144a565b610c6c565b9050919050565b5f819050919050565b61148683611453565b61149a61149282611474565b8484546113f9565b825550505050565b5f90565b6114ae6114a2565b6114b981848461147d565b505050565b5b818110156114dc576114d15f826114a6565b6001810190506114bf565b5050565b601f821115611521576114f2816113cc565b6114fb846113de565b8101602085101561150a578190505b61151e611516856113de565b8301826114be565b50505b505050565b5f82821c905092915050565b5f6115415f1984600802611526565b1980831691505092915050565b5f6115598383611532565b9150826002028217905092915050565b61157383836113c2565b67ffffffffffffffff81111561158c5761158b6112da565b5b6115968254611236565b6115a18282856114e0565b5f601f8311600181146115ce575f84156115bc578287013590505b6115c6858261154e565b86555061162d565b601f1984166115dc866113cc565b5f5b82811015611603578489013582556001820191506020850194506020810190506115de565b86831015611620578489013561161c601f891682611532565b8355505b6001600288020188555050505b50505050505050565b828183375f83830152505050565b5f61164f8385610d22565b935061165c838584611636565b61166583610d5a565b840190509392505050565b5f6080820190506116835f830188610cca565b6116906020830187610cca565b61169d6040830186610cca565b81810360608301526116b0818486611644565b90509695505050505050565b7f54726164657220616464726573732063616e6e6f74206265207a65726f0000005f82015250565b5f6116f0601d83610d22565b91506116fb826116bc565b602082019050919050565b5f6020820190508181035f83015261171d816116e4565b9050919050565b61172d82610d18565b67ffffffffffffffff811115611746576117456112da565b5b6117508254611236565b61175b8282856114e0565b5f60209050601f83116001811461178c575f841561177a578287015190505b611784858261154e565b8655506117eb565b601f19841661179a866113cc565b5f5b828110156117c15784890151825560018201915060208501945060208101905061179c565b868310156117de57848901516117da601f891682611532565b8355505b6001600288020188555050505b505050505050565b5f60c0820190506118065f83018a610cca565b6118136020830189610d09565b6118206040830188610cca565b61182d6060830187610cca565b8181036080830152611840818587611644565b905061184f60a0830184610d09565b9897505050505050505056fea26469706673582212205e93c47d86ddf94ec5fc980c8e095fe598f94fafe48521f30907cc47eb4e6cbd64736f6c63430008140033";

    private final Web3j web3j;
    private final Credentials credentials;

    protected TransactionContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider gasProvider) {
        super(BINARY, contractAddress, web3j, credentials, gasProvider);
        this.web3j = web3j;
        this.credentials = credentials;
    }

    public static TransactionContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider gasProvider) {
        return new TransactionContract(contractAddress, web3j, credentials, gasProvider);
    }

    // ---------- 거래 생성 ----------
    public RemoteFunctionCall<TransactionReceipt> createTransaction(
            String traderId,
            BigInteger transactionPeriod,
            BigInteger amount,
            String info
    ) {
        Function function = new Function(
                "createTransaction",
                Arrays.asList(
                        new Address(traderId),
                        new Uint256(transactionPeriod),
                        new Uint256(amount),
                        new Utf8String(info)
                ),
                Collections.emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    // ---------- 단건 조회 ----------
    public TransactionDto getTransaction(BigInteger transactionId) throws Exception {
        Function function = new Function(
                "getTransaction",
                Collections.singletonList(new Uint256(transactionId)),
                Arrays.asList(
                        new TypeReference<Uint256>() {},
                        new TypeReference<Uint8>() {},
                        new TypeReference<Address>() {},
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Address>() {}
                )
        );

        String encoded = FunctionEncoder.encode(function);

        EthCall response = web3j.ethCall(
                Transaction.createEthCallTransaction(
                        credentials.getAddress(), getContractAddress(), encoded),
                DefaultBlockParameterName.LATEST
        ).send();

        List<Type> decoded = FunctionReturnDecoder.decode(response.getValue(), function.getOutputParameters());

        if (decoded.isEmpty()) {
            throw new RuntimeException("No transaction found");
        }

        return new TransactionDto(
                ((BigInteger) decoded.get(0).getValue()).longValue(),
                decoded.get(1).getValue().toString(),
                ((BigInteger) decoded.get(2).getValue()).intValue(),
                ((BigInteger) decoded.get(3).getValue()).longValue(),
                decoded.get(4).getValue().toString(),
                decoded.get(5).getValue().toString()
        );
    }

    // ---------- 거래 수정 ----------
    public RemoteFunctionCall<TransactionReceipt> updateTransaction(
            BigInteger transactionId,
            BigInteger transactionPeriod,
            BigInteger amount,
            String info
    ) {
        Function function = new Function(
                "updateTransaction",
                Arrays.asList(
                        new Uint256(transactionId),
                        new Uint256(transactionPeriod),
                        new Uint256(amount),
                        new Utf8String(info)
                ),
                Collections.emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    // ---------- 거래 삭제 ----------
    public RemoteFunctionCall<TransactionReceipt> deleteTransaction(BigInteger transactionId) {
        Function function = new Function(
                "deleteTransaction",
                Collections.singletonList(new Uint256(transactionId)),
                Collections.emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    // ---------- 내 거래 전체 조회 ----------
    public List<TransactionDto> getTransactions() throws IOException {

        Function function = new Function(
                "getTransactions",
                Collections.emptyList(),
                Collections.singletonList(new TypeReference<DynamicArray<TransactionStruct>>() {})
        );

        String encoded = FunctionEncoder.encode(function);

        EthCall response = web3j.ethCall(
                Transaction.createEthCallTransaction(
                        credentials.getAddress(), getContractAddress(), encoded),
                DefaultBlockParameterName.LATEST
        ).send();

        List<Type> decoded = FunctionReturnDecoder.decode(response.getValue(), function.getOutputParameters());

        List<TransactionDto> result = new ArrayList<>();

        if (!decoded.isEmpty()) {
            List<DynamicStruct> records = (List<DynamicStruct>) decoded.get(0).getValue();

            for (DynamicStruct record : records) {
                List<Type> fields = record.getValue();

                TransactionDto dto = new TransactionDto(
                        ((BigInteger) fields.get(0).getValue()).longValue(),       // id
                        fields.get(1).getValue().toString(),                       // traderId
                        ((BigInteger) fields.get(2).getValue()).intValue(),        // transactionPeriod
                        ((BigInteger) fields.get(3).getValue()).longValue(),       // amount
                        fields.get(4).getValue().toString(),                       // info
                        fields.get(5).getValue().toString()                        // creator
                );

                result.add(dto);
            }
        }

        return result;
    }
}

