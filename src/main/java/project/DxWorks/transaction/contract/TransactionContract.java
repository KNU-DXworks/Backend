package project.DxWorks.transaction.contract;

import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.FunctionReturnDecoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.Transaction;
import org.web3j.protocol.core.methods.response.EthCall;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.gas.ContractGasProvider;
import project.DxWorks.transaction.dto.TransactionDto;
import project.DxWorks.transaction.struct.TransactionStruct;

import java.io.IOException;
import java.math.BigInteger;
import java.util.*;

public class TransactionContract extends Contract {

    public static final String BINARY = "608060405260015f55348015610013575f80fd5b50611d0d806100215f395ff3fe608060405260043610610079575f3560e01c80639ace38c21161004d5780639ace38c214610139578063c3d68d431461017b578063cf6ce6b9146101a3578063d7ca38f3146101bf57610079565b8062e9c0061461007d57806333ea3dc8146100a557806383920e90146100e757806388fa406914610111575b5f80fd5b348015610088575f80fd5b506100a3600480360381019061009e9190610fcc565b6101e9565b005b3480156100b0575f80fd5b506100cb60048036038101906100c69190610fcc565b610355565b6040516100de97969594939291906110e9565b60405180910390f35b3480156100f2575f80fd5b506100fb610480565b6040516101089190611326565b60405180910390f35b34801561011c575f80fd5b50610137600480360381019061013291906113a7565b61072f565b005b348015610144575f80fd5b5061015f600480360381019061015a9190610fcc565b610840565b60405161017297969594939291906110e9565b60405180910390f35b348015610186575f80fd5b506101a1600480360381019061019c9190611455565b61094e565b005b6101bd60048036038101906101b89190610fcc565b610c1f565b005b3480156101ca575f80fd5b506101d3610e1c565b6040516101e091906114d9565b60405180910390f35b5f60015f8381526020019081526020015f209050806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461028e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102859061153c565b60405180910390fd5b60015f8381526020019081526020015f205f8082015f9055600182015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282015f6101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600382015f9055600482015f9055600582015f61030f9190610ed4565b600682015f6101000a81549060ff02191690555050817f4557095eb267dfd5f7e33f676e26d820f8221c17988aea42c6776b36f31f06a060405160405180910390a25050565b5f805f805f60605f8060015f8a81526020019081526020015f209050805f0154816001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16826002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360030154846004015485600501866006015f9054906101000a900460ff168180546103e890611587565b80601f016020809104026020016040519081016040528092919081815260200182805461041490611587565b801561045f5780601f106104365761010080835404028352916020019161045f565b820191905f5260205f20905b81548152906001019060200180831161044257829003601f168201915b50505050509150975097509750975097509750975050919395979092949650565b60605f80600190505b5f548110156104d2576104ab60015f8381526020019081526020015f20610e21565b156104bf5781806104bb906115e4565b9250505b80806104ca906115e4565b915050610489565b505f8167ffffffffffffffff8111156104ee576104ed61162b565b5b60405190808252806020026020018201604052801561052757816020015b610514610f11565b81526020019060019003908161050c5790505b5090505f80600190505b5f548110156107255761055360015f8381526020019081526020015f20610e21565b156107125760015f8281526020019081526020015f206040518060e00160405290815f8201548152602001600182015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600382015481526020016004820154815260200160058201805461064b90611587565b80601f016020809104026020016040519081016040528092919081815260200182805461067790611587565b80156106c25780601f10610699576101008083540402835291602001916106c2565b820191905f5260205f20905b8154815290600101906020018083116106a557829003601f168201915b50505050508152602001600682015f9054906101000a900460ff1615151515815250508383815181106106f8576106f7611658565b5b6020026020010181905250818061070e906115e4565b9250505b808061071d906115e4565b915050610531565b5081935050505090565b5f60015f8781526020019081526020015f209050806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cb906116cf565b60405180910390fd5b84816003018190555083816004018190555082828260050191826107f9929190611894565b50857f62a5cb17bd0bdb4655ed5e60656f59f26b74f6f8c3c916a48b6e968cdbb5e5f186868686604051610830949392919061199b565b60405180910390a2505050505050565b6001602052805f5260405f205f91509050805f015490806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050180546108bb90611587565b80601f01602080910402602001604051908101604052809291908181526020018280546108e790611587565b80156109325780601f1061090957610100808354040283529160200191610932565b820191905f5260205f20905b81548152906001019060200180831161091557829003601f168201915b505050505090806006015f9054906101000a900460ff16905087565b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036109bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b390611a23565b60405180910390fd5b5f83116109fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f590611a8b565b60405180910390fd5b6040518060e001604052805f5481526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200183838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081526020015f151581525060015f805481526020019081526020015f205f820151815f01556020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005019081610b729190611aa9565b5060c0820151816006015f6101000a81548160ff0219169083151502179055509050508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff165f547fe51b5c4315dc44de1487886ba768443d65365892a10dc5dc22544633829f8b6987878787604051610bfa949392919061199b565b60405180910390a45f80815480929190610c13906115e4565b91905055505050505050565b5f60015f8381526020019081526020015f209050806006015f9054906101000a900460ff1615610c84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7b90611bc2565b60405180910390fd5b806002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0c90611c2a565b60405180910390fd5b80600401543414610d5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5290611c92565b60405180910390fd5b806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3490811502906040515f60405180830381858888f19350505050158015610dc1573d5f803e3d5ffd5b506001816006015f6101000a81548160ff021916908315150217905550817f08630ddb7c5261c6aadfed2fd7936e278d9f28c6806fd1a1c482dbe07272ff583334604051610e10929190611cb0565b60405180910390a25050565b5f5481565b5f816001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ecd5750816002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b508054610ee090611587565b5f825580601f10610ef15750610f0e565b601f0160209004905f5260205f2090810190610f0d9190610f76565b5b50565b6040518060e001604052805f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f8152602001606081526020015f151581525090565b5b80821115610f8d575f815f905550600101610f77565b5090565b5f80fd5b5f80fd5b5f819050919050565b610fab81610f99565b8114610fb5575f80fd5b50565b5f81359050610fc681610fa2565b92915050565b5f60208284031215610fe157610fe0610f91565b5b5f610fee84828501610fb8565b91505092915050565b61100081610f99565b82525050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61102f82611006565b9050919050565b61103f81611025565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b8381101561107c578082015181840152602081019050611061565b5f8484015250505050565b5f601f19601f8301169050919050565b5f6110a182611045565b6110ab818561104f565b93506110bb81856020860161105f565b6110c481611087565b840191505092915050565b5f8115159050919050565b6110e3816110cf565b82525050565b5f60e0820190506110fc5f83018a610ff7565b6111096020830189611036565b6111166040830188611036565b6111236060830187610ff7565b6111306080830186610ff7565b81810360a08301526111428185611097565b905061115160c08301846110da565b98975050505050505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61118f81610f99565b82525050565b61119e81611025565b82525050565b5f82825260208201905092915050565b5f6111be82611045565b6111c881856111a4565b93506111d881856020860161105f565b6111e181611087565b840191505092915050565b6111f5816110cf565b82525050565b5f60e083015f8301516112105f860182611186565b5060208301516112236020860182611195565b5060408301516112366040860182611195565b5060608301516112496060860182611186565b50608083015161125c6080860182611186565b5060a083015184820360a086015261127482826111b4565b91505060c083015161128960c08601826111ec565b508091505092915050565b5f61129f83836111fb565b905092915050565b5f602082019050919050565b5f6112bd8261115d565b6112c78185611167565b9350836020820285016112d985611177565b805f5b8581101561131457848403895281516112f58582611294565b9450611300836112a7565b925060208a019950506001810190506112dc565b50829750879550505050505092915050565b5f6020820190508181035f83015261133e81846112b3565b905092915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261136757611366611346565b5b8235905067ffffffffffffffff8111156113845761138361134a565b5b6020830191508360018202830111156113a05761139f61134e565b5b9250929050565b5f805f805f608086880312156113c0576113bf610f91565b5b5f6113cd88828901610fb8565b95505060206113de88828901610fb8565b94505060406113ef88828901610fb8565b935050606086013567ffffffffffffffff8111156114105761140f610f95565b5b61141c88828901611352565b92509250509295509295909350565b61143481611025565b811461143e575f80fd5b50565b5f8135905061144f8161142b565b92915050565b5f805f805f6080868803121561146e5761146d610f91565b5b5f61147b88828901611441565b955050602061148c88828901610fb8565b945050604061149d88828901610fb8565b935050606086013567ffffffffffffffff8111156114be576114bd610f95565b5b6114ca88828901611352565b92509250509295509295909350565b5f6020820190506114ec5f830184610ff7565b92915050565b7f4f6e6c792073656c6c65722063616e2064656c657465000000000000000000005f82015250565b5f61152660168361104f565b9150611531826114f2565b602082019050919050565b5f6020820190508181035f8301526115538161151a565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061159e57607f821691505b6020821081036115b1576115b061155a565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6115ee82610f99565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036116205761161f6115b7565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4f6e6c792073656c6c65722063616e20757064617465000000000000000000005f82015250565b5f6116b960168361104f565b91506116c482611685565b602082019050919050565b5f6020820190508181035f8301526116e6816116ad565b9050919050565b5f82905092915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026117537fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611718565b61175d8683611718565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61179861179361178e84610f99565b611775565b610f99565b9050919050565b5f819050919050565b6117b18361177e565b6117c56117bd8261179f565b848454611724565b825550505050565b5f90565b6117d96117cd565b6117e48184846117a8565b505050565b5b81811015611807576117fc5f826117d1565b6001810190506117ea565b5050565b601f82111561184c5761181d816116f7565b61182684611709565b81016020851015611835578190505b61184961184185611709565b8301826117e9565b50505b505050565b5f82821c905092915050565b5f61186c5f1984600802611851565b1980831691505092915050565b5f611884838361185d565b9150826002028217905092915050565b61189e83836116ed565b67ffffffffffffffff8111156118b7576118b661162b565b5b6118c18254611587565b6118cc82828561180b565b5f601f8311600181146118f9575f84156118e7578287013590505b6118f18582611879565b865550611958565b601f198416611907866116f7565b5f5b8281101561192e57848901358255600182019150602085019450602081019050611909565b8683101561194b5784890135611947601f89168261185d565b8355505b6001600288020188555050505b50505050505050565b828183375f83830152505050565b5f61197a838561104f565b9350611987838584611961565b61199083611087565b840190509392505050565b5f6060820190506119ae5f830187610ff7565b6119bb6020830186610ff7565b81810360408301526119ce81848661196f565b905095945050505050565b7f427579657220616464726573732063616e6e6f74206265207a65726f000000005f82015250565b5f611a0d601c8361104f565b9150611a18826119d9565b602082019050919050565b5f6020820190508181035f830152611a3a81611a01565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e20300000005f82015250565b5f611a75601d8361104f565b9150611a8082611a41565b602082019050919050565b5f6020820190508181035f830152611aa281611a69565b9050919050565b611ab282611045565b67ffffffffffffffff811115611acb57611aca61162b565b5b611ad58254611587565b611ae082828561180b565b5f60209050601f831160018114611b11575f8415611aff578287015190505b611b098582611879565b865550611b70565b601f198416611b1f866116f7565b5f5b82811015611b4657848901518255600182019150602085019450602081019050611b21565b86831015611b635784890151611b5f601f89168261185d565b8355505b6001600288020188555050505b505050505050565b7f416c7265616479207061696400000000000000000000000000000000000000005f82015250565b5f611bac600c8361104f565b9150611bb782611b78565b602082019050919050565b5f6020820190508181035f830152611bd981611ba0565b9050919050565b7f4f6e6c7920726567697374657265642062757965722063616e207061790000005f82015250565b5f611c14601d8361104f565b9150611c1f82611be0565b602082019050919050565b5f6020820190508181035f830152611c4181611c08565b9050919050565b7f496e636f7272656374207061796d656e7420616d6f756e7400000000000000005f82015250565b5f611c7c60188361104f565b9150611c8782611c48565b602082019050919050565b5f6020820190508181035f830152611ca981611c70565b9050919050565b5f604082019050611cc35f830185611036565b611cd06020830184610ff7565b939250505056fea2646970667358221220c441976c51510ef3eab144cbb4c14f7d0e2c4982cbff82f52e0523d28e07384064736f6c63430008140033";

    private final Web3j web3j;
    private final Credentials credentials;

    protected TransactionContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider gasProvider) {
        super(BINARY, contractAddress, web3j, credentials, gasProvider);
        this.web3j = web3j;
        this.credentials = credentials;
    }

    public static TransactionContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider gasProvider) {
        return new TransactionContract(contractAddress, web3j, credentials, gasProvider);
    }

    // ---------- 판매자가 거래 생성 ----------
    public RemoteFunctionCall<TransactionReceipt> createTransaction(
            String buyer,
            BigInteger transactionPeriod,
            BigInteger amount,
            String info
    ) {
        Function function = new Function(
                "createTransaction",
                Arrays.asList(
                        new Address(buyer),
                        new Uint256(transactionPeriod),
                        new Uint256(amount),
                        new Utf8String(info)
                ),
                Collections.emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    public Optional<BigInteger> getCreatedTransactionId(TransactionReceipt receipt) {
        final Event event = new Event("TransactionCreated", Arrays.<TypeReference<?>>asList(
                new TypeReference<Uint256>(true) {},
                new TypeReference<Address>(true) {},
                new TypeReference<Address>(true) {},
                new TypeReference<Uint256>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Utf8String>() {}
        ));

        for (Log log : receipt.getLogs()) {
            EventValues eventValues = Contract.staticExtractEventParameters(event, log);
            if (eventValues != null && !eventValues.getIndexedValues().isEmpty()) {
                Uint256 id = (Uint256) eventValues.getIndexedValues().get(0);
                return Optional.of(id.getValue());
            }
        }
        return Optional.empty();
    }

    // ---------- 단건 조회 ----------
    public TransactionDto getTransaction(BigInteger transactionId) throws Exception {
        Function function = new Function(
                "getTransaction",
                Collections.singletonList(new Uint256(transactionId)),
                Arrays.asList(
                        new TypeReference<Uint256>() {},
                        new TypeReference<Address>() {},
                        new TypeReference<Address>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Utf8String>() {},
                        new TypeReference<org.web3j.abi.datatypes.Bool>() {}
                )
        );

        String encoded = FunctionEncoder.encode(function);
        EthCall response = web3j.ethCall(
                Transaction.createEthCallTransaction(credentials.getAddress(), getContractAddress(), encoded),
                DefaultBlockParameterName.LATEST
        ).send();

        List<Type> decoded = FunctionReturnDecoder.decode(response.getValue(), function.getOutputParameters());

        if (decoded.isEmpty()) {
            throw new RuntimeException("No transaction found");
        }

        return new TransactionDto(
                ((BigInteger) decoded.get(0).getValue()).longValue(),
                decoded.get(1).getValue().toString(), // seller
                decoded.get(2).getValue().toString(), // buyer
                ((BigInteger) decoded.get(3).getValue()).intValue(),
                ((BigInteger) decoded.get(4).getValue()).longValue(),
                decoded.get(5).getValue().toString(),
                (Boolean) decoded.get(6).getValue()
        );
    }

    // ---------- 거래 수정 ----------
    public RemoteFunctionCall<TransactionReceipt> updateTransaction(
            BigInteger transactionId,
            BigInteger transactionPeriod,
            BigInteger amount,
            String info
    ) {
        Function function = new Function(
                "updateTransaction",
                Arrays.asList(
                        new Uint256(transactionId),
                        new Uint256(transactionPeriod),
                        new Uint256(amount),
                        new Utf8String(info)
                ),
                Collections.emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    // ---------- 거래 삭제 ----------
    public RemoteFunctionCall<TransactionReceipt> deleteTransaction(BigInteger transactionId) {
        Function function = new Function(
                "deleteTransaction",
                Collections.singletonList(new Uint256(transactionId)),
                Collections.emptyList()
        );
        return executeRemoteCallTransaction(function);
    }

    // ---------- 구매자가 거래 송금 ----------
    public RemoteFunctionCall<TransactionReceipt> payForTransaction(BigInteger transactionId, BigInteger amount) {
        Function function = new Function(
                "payForTransaction",
                Collections.singletonList(new Uint256(transactionId)),
                Collections.emptyList()
        );
        return executeRemoteCallTransaction(function, amount);
    }

    // ---------- 내 거래 전체 조회 ----------
    public List<TransactionDto> getTransactions() throws IOException {
        Function function = new Function(
                "getTransactions",
                Collections.emptyList(),
                Collections.singletonList(new TypeReference<DynamicArray<TransactionStruct>>() {})
        );

        String encoded = FunctionEncoder.encode(function);
        EthCall response = web3j.ethCall(
                Transaction.createEthCallTransaction(credentials.getAddress(), getContractAddress(), encoded),
                DefaultBlockParameterName.LATEST
        ).send();

        List<Type> decoded = FunctionReturnDecoder.decode(response.getValue(), function.getOutputParameters());
        List<TransactionDto> result = new ArrayList<>();

        if (!decoded.isEmpty()) {
            List<DynamicStruct> records = (List<DynamicStruct>) decoded.get(0).getValue();
            for (DynamicStruct record : records) {
                List<Type> fields = record.getValue();
                TransactionDto dto = new TransactionDto(
                        ((BigInteger) fields.get(0).getValue()).longValue(),
                        fields.get(1).getValue().toString(), // seller
                        fields.get(2).getValue().toString(), // buyer
                        ((BigInteger) fields.get(3).getValue()).intValue(),
                        ((BigInteger) fields.get(4).getValue()).longValue(),
                        fields.get(5).getValue().toString(),
                        (Boolean) fields.get(6).getValue()
                );
                result.add(dto);
            }
        }

        return result;
    }

}

